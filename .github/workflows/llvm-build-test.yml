name: Build llvm toolchain


on:
  workflow_dispatch:

jobs:
  build:
    name: Build

    strategy:
      matrix:
        target:
          - id: 'linux-amd64'
            os: 'ubuntu-latest'
            tar_extra_args: ''
          - id: 'linux-aarch64'
            os: "ubuntu-latest"
          #  os: ['self-hosted', 'linux', 'ARM64']
          - id: 'linux-riscv64'
            os: "ubuntu-latest"
          #  os: ['self-hosted', 'linux', 'RISCV64']
          - id: 'darwin-amd64'
            os: 'macos-13'
            tar_extra_args: ''
          - id: 'darwin-aarch64'
            os: 'macos-latest'
            tar_extra_args: ''
            # When unpacking an archive on Windows, the symlinks can't be
            # created unless the target path already exists. This causes
            # problems when the linked file is ordered after the link
          - id: 'windows-amd64'
            os: 'windows-latest'
            # When unpacking an archive on Windows, the symlinks can't be
            # created unless the target path already exists. This causes
            # problems when the linked file is ordered after the link
            # inside the archive. Dereferencing the files when packing them
            # adds an additional copy per link, but it reliably works and
            # the additional size is not too large on Windows.
            tar_extra_args: '--dereference'
        llvm_version: ['18.x']
        llvm_repo_url: ['https://github.com/llvm/llvm-project.git']
      fail-fast: true

    runs-on: ${{ matrix.target.os }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Install `ninja` on Ubuntu
        if: startsWith(matrix.target.id, 'linux-')
        shell: bash
        run: |
          sudo apt install ninja-build -y
      
      - name: Install cross-compilation tools
        if: matrix.target.id == 'linux-aarch64'
        shell: bash
        run: |
          sudo apt install gcc-12-aarch64-linux-gnu g++-12-aarch64-linux-gnu gcc-12-multilib binutils-aarch64-linux-gnu libgcc-12-dev-arm64-cross libstdc++6-arm64-cross -y

      - name: Install cross-compilation tools
        if: matrix.target.id == 'linux-riscv64'
        shell: bash
        run: |
          sudo apt install gcc-12-riscv64-linux-gnu g++-12-riscv64-linux-gnu gcc-12-multilib binutils-riscv64-linux-gnu libgcc-12-dev-riscv64-cross libstdc++6-riscv64-cross -y

      - name: Install `ninja` on macOS
        if: startsWith(matrix.target.id, 'darwin-')
        shell: bash
        run: |
          brew install ninja

          #- name: Install `ninja` on Windows
          #  if: startsWith(matrix.target.id, 'windows-')
          #  shell: bash
          #  run: |
          #    choco install ninja
      - name: Setup MSVC (Windows) 
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.target.id == 'windows-amd64'

      - name: Build
        if: matrix.target.id != 'windows-amd64' && matrix.target.id != 'linux-aarch64' && matrix.target.id != 'linux-riscv64'
        shell: bash
        run: |
          ./scripts/build_llvm.sh ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }}

      - name: Build (linux-aarch64)
        if: matrix.target.id == 'linux-aarch64'
        shell: bash
        run: |
          ./scripts/build_llvm.sh ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }} aarch64

      - name: Build (linux-aarch64)
        if: matrix.target.id == 'linux-riscv64'
        shell: bash
        run: |
          ./scripts/build_llvm.sh ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }} riscv64

     
      - name: Build (Windows)
        if: matrix.target.id == 'windows-amd64'
        #shell: |
        #  powershell -Command "& '{0}'"
        run: |
          ./scripts/build_llvm.ps1 ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }}

      - name: Inspect
        shell: bash
        run: |
          PATH=llvm-project/build/destdir/bin:llvm-project/build/destdir/usr/bin:$PATH llvm-config --version
          PATH=llvm-project/build/destdir/bin:llvm-project/build/destdir/usr/bin:$PATH clang --version

      - name: Zip
        shell: bash
        run: |
          mkdir -p dist
          tar --directory llvm-project/build/destdir --create --xz --verbose ${{ matrix.target.tar_extra_args }} --file dist/llvm.tar.xz .
          ls -lh dist/llvm.tar.xz

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.id }}-${{ matrix.llvm_version }}
          path: dist
          if-no-files-found: error
          retention-days: 1
