name: Build llvm toolchain

on:
    workflow_dispatch:
    push:
      branches:
        - dev_0.1

jobs:
  build:
    name: Build
    continue-on-error: true
    strategy:
      matrix:
        target:
          - id: 'linux-amd64'
            os: 'ubuntu-latest'
            tar_extra_args: ''
          # - id: 'linux-aarch64'
          #   os: "ubuntu-latest" 
          #  os: ['self-hosted', 'linux', 'ARM64']
          # - id: 'linux-riscv64'
          #   os: "ubuntu-latest"
          #  os: ['self-hosted', 'linux', 'RISCV64']
          ## https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/
          - id: 'darwin-amd64'
            os: 'macos-14'
            tar_extra_args: ''
          - id: 'windows-amd64'
            os: 'windows-2019'
          # When unpacking an archive on Windows, the symlinks can't be
          # created unless the target path already exists. This causes
          # problems when the linked file is ordered after the link
          # inside the archive. Dereferencing the files when packing them
          # adds an additional copy per link, but it reliably works and
          # the additional size is not too large on Windows.
            tar_extra_args: '--dereference'
        llvm_version: ['17.x']
        llvm_repo_url: ['https://github.com/llvm/llvm-project.git']
      fail-fast: true

    runs-on: ${{ matrix.target.os }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
            fetch-depth: 2
      - name: Install `ninja` on Ubuntu
        if: startsWith(matrix.target.id, 'linux-')
        shell: bash
        run: |
          sudo apt install ninja-build build-essential clang coreutils -y
          echo "cpu core num is "
          nproc
      
      - name: Install `ninja llvm cmake `  on macOS
        if: startsWith(matrix.target.id, 'darwin-')
        shell: bash
        run: |
          brew install ninja llvm cmake
          clang --version
          echo "BREW_INSTALL_PREFIX=$(brew --prefix llvm)" >> $GITHUB_ENV
          echo "${BREW_INSTALL_PREFIX}/bin"
          echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
          clang --version
          echo "llvm"
          /opt/homebrew/opt/llvm/bin/clang --version

      - name: Build
        # if: matrix.target.id != 'windows-amd64' && matrix.target.id != 'linux-aarch64' && matrix.target.id != 'linux-riscv64'
        if: matrix.target.id == 'linux-amd64'
        shell: bash
        run: |
          ./scripts/build_llvm.sh ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }}

      - name: Build (darwin-amd64)
        if: startsWith(matrix.target.id, 'darwin-')
        shell: bash
        run: |
          ./scripts/build_llvm_mac.sh ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }}  

      - name: Build (Windows)
        if: matrix.target.id == 'windows-amd64'
        shell: |
          powershell -Command "& '{0}'"
        run: |
          ./scripts/build_llvm.ps1 ${{ matrix.llvm_version }} ${{ matrix.llvm_repo_url }}

      - name: Inspect
        shell: bash
        run: |
          PATH=llvm-project/build/destdir/bin:llvm-project/build/destdir/usr/bin:$PATH llvm-config --version
          PATH=llvm-project/build/destdir/bin:llvm-project/build/destdir/usr/bin:$PATH clang --version

      - name: Zip
        shell: bash
        run: |
          mkdir -p dist
          tar --directory llvm-project/build/destdir --create --xz --verbose ${{ matrix.target.tar_extra_args }} --file dist/llvm.tar.xz .
          ls -lh dist/llvm.tar.xz

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.id }}-${{ matrix.llvm_version }}
          path: dist
          if-no-files-found: error
          retention-days: 7