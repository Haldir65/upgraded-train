name: multiarch build

on:
  workflow_dispatch:
  push:
    branches:
      - dev_0.5
 

jobs:
  build:
    name: Build with vcpkg
    continue-on-error: false
    strategy:
      matrix:
        target:
          # - id: 'linux-amd64-distribution'
          #   os: 'ubuntu-latest'
          #   tar_extra_args: ''
          #   llvm_version: '18.x'
          #   build_target: 'distribution'
          - id: 'linux-amd64'
            os: 'ubuntu-latest'
          # - id: 'linux-aarch64'
          #   os: "ubuntu-latest" 
          #  os: ['self-hosted', 'linux', 'ARM64']
          # - id: 'linux-riscv64'
          #   os: "ubuntu-latest"
          #  os: ['self-hosted', 'linux', 'RISCV64']
          ## https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/
          - id: 'darwin-amd64'
            os: 'macos-14'
          - id: 'windows-amd64'
            os: 'windows-2022'
          # When unpacking an archive on Windows, the symlinks can't be
          # created unless the target path already exists. This causes
          # problems when the linked file is ordered after the link
          # inside the archive. Dereferencing the files when packing them
          # adds an additional copy per link, but it reliably works and
          # the additional size is not too large on Windows. 
        # llvm_version: ['17.x']
      fail-fast: true

    runs-on: ${{ matrix.target.os }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Setup anew (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11 # Always specify the specific _version_ of the
                                  # action you need, `v11` in this case to stay up  

      - name: Install LLVM and Clang on linux
        if: startsWith(matrix.target.id, 'linux-')
        uses: KyleMayes/install-llvm-action@v1
        with:
            version: "17.0"

      - name: Install `ninja` on Ubuntu
        if: startsWith(matrix.target.id, 'linux-')
        shell: bash
        run: |
          clang --version
          sudo apt install ninja-build build-essential coreutils tree -y
          echo "cpu core num is "
          nproc
      
      - name: Install `ninja llvm cmake `  on macOS
        if: startsWith(matrix.target.id, 'darwin-')
        shell: bash
        run: |
          brew install ninja llvm cmake tree
          clang --version
          echo "BREW_INSTALL_PREFIX=$(brew --prefix llvm)" >> $GITHUB_ENV
          echo "${BREW_INSTALL_PREFIX}/bin"
          echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
          clang --version
          echo "llvm"
          /opt/homebrew/opt/llvm/bin/clang --version

      - name: configure cmake  and vcpkg 
        shell: bash
        run: |
          cmake --preset=debug

      - name: build via cmake
        shell: bash
        run: |
          cmake --build build

      - name: show layouts (unix)
        if: startsWith(matrix.target.id, 'linux-') || startsWith(matrix.target.id, 'darwin-')
        shell: bash
        run: |
          tree -L 3 build

      - name: Inspect
        shell: bash
        run: |
          if [[ "${{ matrix.target.id }}" == 'windows-amd64' ]]; then
            PATH=build/Debug:$PATH fibux.exe
          else
            PATH=build:$PATH fibux
          fi
          # if [[ "${{ matrix.target.id }}" == 'windows-amd64' ]]; then
          #   powershell -executionpolicy bypass -File scripts/test.ps1
          # else
          #   bash scripts/test.sh
          # fi
